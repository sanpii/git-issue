#!/bin/sh

USAGE='[help|init|new|show|edit|rm|ls]'
LONG_USAGE='git issue help
	print long help message.
git issue init
	initialize the issue tracker.
git issue new [<title>] [<description>]
	create a new issue.
git issue show <id>
	display issue #id.
git issue edit <id>
	edit issue #id.
git issue rm <id>
	delete issue <id>.
git issue ls
	show all issues.'

OPTIONS_SPEC=
. git-sh-setup
. git-sh-i18n

OLD_REV=$(git rev-parse --abbrev-ref HEAD)
ISSUE_BRANCH=$(git config --get issue.branch || echo 'issues')

GIT_QUIET=

# {{{ Shell common
function_exists () {
	function=$1

	type $function >/dev/null 2>&1
}
# }}}
# {{{ Git common
git_local_branch_exists () {
	local name=$1

	git branch --no-color | grep -q "$name"
}

git_have_changes () {
	test -n "$(git status --porcelain)"
}

git_issue_parse_args () {
	while getopts ":q" opt
	do
		case $opt in
			q)
				GIT_QUIET=1
			;;
			\?)
				die $(eval_gettextln "Invalid option: -$OPTARG")
			;;
		esac
	done
}
# }}}
# {{{ Git issue common
git_issue_get_last_id () {
	local id=$(ls -1 | grep '[0-9]\+' | sort -n | tail -1)

	if test -z $id
	then
		id=0
	fi
	echo $id
}

git_issue_switch_branch () {
	git_local_branch_exists $ISSUE_BRANCH || die $(eval_gettextln 'Git issue not initialized.')
	git_have_changes && die $(gettextln "You have unstaged changes.\nPlease commit or stash them.")

	git checkout -q $ISSUE_BRANCH
}

git_issue_restore_branch () {
	git checkout -q $OLD_REV
}
# }}}
# {{{ Commands
git_issue_help () {
	git issue -h
}

git_issue_init () {
	git_local_branch_exists $ISSUE_BRANCH && die $(gettextln 'Git issue already initialized.')
	git_have_changes && die $(gettextln "Cannot initialized: You have unstaged changes.\nPlease commit or stash them.")

	git checkout -q --orphan $ISSUE_BRANCH
	test -n "$(git ls-files)" && git rm -qf $(git ls-files)
	git commit -q --allow-empty -m "$(gettextln 'git issue init')"

	say $(gettextln 'Git issue initialized.')
}

git_issue_new () {
	local title="$1"
	local description="$2"
	local id=$(expr $(git_issue_get_last_id) + 1)

	echo "title: ${title}
status: new
assign:
tags:
milestone:
type:

${description}" >"$id"

	git add "$id"
	git commit -q -m "$(eval_gettextln "Create issue #${id}")"

	say $(eval_gettextln "Issue #${id} created.")
}

git_issue_show () {
	local id="$1"

	test -f "$id" || die $(eval_gettextln "Issue #${id} doesn't exist")
	git_pager $id
}

git_issue_edit () {
	local id="$1"

	test -f "$id" || die $(eval_gettextln "Issue #${id} doesn't exist")

	git_editor "$id"

	git_have_changes && git commit -q -m "$(eval_gettextln "Edit issue #${id}")" "$id" && say $(eval_gettextln "Issue #${id} saved.")
}

git_issue_rm () {
	local id="$1"

	test -f "$id" || die $(eval_gettextln "Issue #${id} doesn't exist")
	git rm -q "$id"
	git commit -q -m "Delete issue #$id"
	say $(eval_gettextln "Issue #${id} deleted.")
}

git_issue_ls () {
	local issues="$(git ls-files)"

	if test -n "$issues"
	then
		grep '^title: .*' $issues | sed 's/title://'
	else
		echo $(gettextln 'Nothing to do :)')
	fi
}
# }}}

trap 'git_issue_restore_branch' EXIT

if test $# -eq 0
then
	usage
else
	cmd="$1"
	shift
	git_issue_parse_args $*
	shift $(( OPTIND-1 ))

	function_exists "git_issue_${cmd}" || die $(eval_gettextln "git issue $cmd doesn't exist")

	test $cmd != 'help' -a $cmd != 'init' && git_issue_switch_branch
	git_issue_${cmd} "$@"
fi
