#!/bin/bash

USAGE='<command> [options] [arguments]

Available commands:

  help        Print this help message

  init        Initialize the issue tracker
                --quiet, -q

  new         Create a new issue
                --quiet, -q
                --no-edit
                --status <arg>
                --assign <arg>
                --title <arg>
                --tags <arg>
                --milestone <arg>
                --type <arg>

  show        Display an issue
                --quiet, -q
                --color <arg>

  edit        Edit an issue
                --quiet, -q
                --status <arg>
                --title <arg>
                --tags <arg>
                --milestone <arg>
                --type <arg>
                --message, -m <arg>

  delete      Delete an issue
                --quiet, -q
                --message, -m <arg>

  list        Show all issues
                --quiet, -q
                --status <arg>
                --title <arg>
                --tags <arg>
                --milestone <arg>
                --type <arg>
                --color <arg>
                --verbose, -v

  sync        Sync issues with remote repository
                --quiet, -q

  close       Close an issue
                --quiet, -q'

. git-sh-setup
. git-sh-i18n

OLD_REV=$(git rev-parse --abbrev-ref HEAD)
STASHED=false
ISSUE_BRANCH=$(git config --get issue.branch || echo 'issues')

COMMAND=
VERBOSE=false
GIT_QUIET=
COMMIT_MESSAGE=

# {{{ Shell common
function_exists () {
	function=$1

	type $function >/dev/null 2>&1
}
# }}}
# {{{ Git common
git_local_branch_exists () {
	local name=$1

	git branch --no-color | grep -q "$name"
}

git_have_changes () {
	test -n "$(git status --porcelain)"
}

git_want_color () {
	test -t 1 || git config --get-colorbool color.interactive $?
}

git_get_color () {
	$COLOR && git config --get-color "$1" "$2"
}
# }}}
# {{{ Git issue common
git_issue_parse_args () {
	local shortOptions='q'
	local longOptions='quiet'

	COMMAND="${1-list}"
	shift

	COLOR=$(git_want_color)

	case $COMMAND in
		new)
			longOptions="$longOptions,no-edit,status:,assign:,title:,tags:,milestone:,type:"
		;;
		list)
			shortOptions="$shortOptions,v"
			longOptions="$longOptions,verbose,color:,status:,assign:,title:,tags:,milestone:,type:"
		;;
		show)
			longOptions="$longOptions,color:"
		;;
		edit)
			shortOptions="$shortOptions,m:"
			longOptions="$longOptions,status:,assign:,title:,tags:,milestone:,type:,message:"
		;;
		delete)
			shortOptions="$shortOptions,m:"
			longOptions="$longOptions,message:"
		;;
	esac

	OPTS=$( getopt -o $shortOptions -l $longOptions -n 'git-issue' -- "$@" )
	if test $? -ne 0
	then
		usage
		exit 1
	fi

	eval set -- "$OPTS"
	while true
	do
		case $1 in
			--color)
				case $2 in
					always)
						COLOR=true
					;;
					none)
						COLOR=false
					;;
				esac
				shift 2
			;;
			-q|--quiet)
				GIT_QUIET=1
				shift
			;;
			-v|--verbose)
				VERBOSE=true
				shift
			;;
			-m|--message)
				COMMIT_MESSAGE=$2
				shift 2
			;;
			--?*)
				name=$1
				if test $(echo $2 | head -c 1) != '-'
				then
					value=$2
					shift
				else
					value=true;
				fi

				eval "$(echo $name | sed 's/^--//' | sed 's/-/_/g')='$value'"
				shift
			;;
			--)
				shift
				break
			;;
		esac
	done

	for arg
	do
		REMAINING_ARG="$REMAINING_ARG '$arg'"
	done
}

git_issue_get_last_id () {
	local id=$(ls -1 | grep '[0-9]\+' | sort -n | tail -1)

	if test -z $id
	then
		id=0
	fi
	echo $id
}

git_require_clean_work_tree () {
	require_clean_work_tree "$(gettextln 'switch to issues branch')"
}

git_issue_switch_branch () {
	git_local_branch_exists $ISSUE_BRANCH || die $(eval_gettextln 'Git issue not initialized.')

	if git_have_changes
	then
		git stash save -q 'Git issue switch branch'
		if test $? -eq 0
		then
			STASHED=true
		fi
	fi

	git_require_clean_work_tree
	git checkout -q $ISSUE_BRANCH 2>/dev/null
	if test $? -ne 0
	then
		die $(eval_gettextln 'Unable to switch to issues branch')
	fi
}

git_issue_restore_branch () {
	git checkout -q $OLD_REV
	$STASHED && git stash pop -q
}

git_issue_commit () {
	local message="$1"
	local filename="$2"

	if test -n COMMIT_MESSAGE
	then
		message="$message

$COMMIT_MESSAGE"
	fi
	git commit -q -m "$message" $filename
}

git_issue_get () {
	local id=$1
	local field=$2

	grep "^$field:.*$" $id | sed "s/^$field://" | sed 's/^ //'
}
# }}}
# {{{ Commands
git_issue_help () {
	git issue -h
}

git_issue_init () {
	git_local_branch_exists $ISSUE_BRANCH && die $(gettextln 'Git issue already initialized.')
	git_require_clean_work_tree

	git checkout -q --orphan $ISSUE_BRANCH
	test -n "$(git ls-files)" && git rm -qf $(git ls-files)
	git commit -q --allow-empty -m "$(gettextln 'git issue init')"

	say $(gettextln 'Git issue initialized.')
}

git_issue_new () {
	git_issue_switch_branch

	local description="$1"
	local id=$(( $(git_issue_get_last_id) + 1))
	local metadata=''

	if test ! -v "status"
	then
		status='new'
	fi

	for name in title status assign tags milestone type
	do
		if test -v $name
		then
			value=" $(eval echo \$$name)"
		else
			value=""
		fi
		metadata="$metadata$name:$value
"
	done

	echo "$metadata
$description" >"$id"

	test "$no_edit" != true -a -z "$description" && git_editor "$id"

	git add "$id"
	git commit -q -m "$(eval_gettextln "Create issue #${id}")"

	say $(eval_gettextln "Issue #${id} created.")
}

git_issue_show () {
	local id="$1"
	local c_metadata=$(git_get_color 'color.issue.metadata' 'yellow bold')
	local c_reset=$(git_get_color '' 'reset')

	git_issue_switch_branch

	test -f "$id" || die $(eval_gettextln "Issue #${id} doesn't exist")
	cat $id | sed "s/^\(title\|status\|tags\|assign\|type\|milestone\):/${c_metadata}\1:${c_reset}/" | git_pager
}

git_issue_edit () {
	local id="$1"

	git_issue_switch_branch

	test -f "$id" || die $(eval_gettextln "Issue #${id} doesn't exist")

	edited=false
	for name in status title assign tags milestone type
	do
		if test -v $name
		then
			value=$(eval echo \$$name)
			sed -i "s/^$name:.*/$name: $value/" "$id"
			edited=true
		fi
	done

	$edited || git_editor "$id"

	git_have_changes && git_issue_commit "Edit issue #${id}" "$id" && say $(eval_gettextln "Issue #${id} saved.")
}

git_issue_delete () {
	local id="$1"

	git_issue_switch_branch

	test -f "$id" || die $(eval_gettextln "Issue #${id} doesn't exist")
	git rm -q "$id"

	git_issue_commit "Delete issue #$id" && say $(eval_gettextln "Issue #${id} deleted.")
}

git_issue_list () {
	git_issue_switch_branch

	local issues="$(git ls-files | sort -n)"

	if test ! -v "status"
	then
		status='~close'
	fi

	for name in status title assign tags milestone type
	do
		if test -v $name -a -n "$issues"
		then
			value=$(eval echo \$$name | sed 's/|/\\|/g')
			if test $(echo $value | head -c 1) != '~'
			then
				issues=$(grep -l "^$name: \($value\)$" $issues)
			else
				value=$(echo $value | sed 's/^~//')
				issues=$(grep -L "^$name: \($value\)$" $issues)
			fi
		fi
	done

	if test -n "$issues"
	then
		local c_id=$(git_get_color 'color.issue.id' 'blue bold')
		local c_reset=$(git_get_color '' 'reset')

		for id in $issues
		do
			if $VERBOSE
			then
				git_issue_show $id
				echo '--'
			else
				local t=$(git_issue_get $id 'title')

				if test -n "$t"
				then
					t=" $t"
				fi
				echo "${c_id}$id:${c_reset}$t"
			fi
		done
	else
		echo $(gettextln 'Nothing to do :)')
	fi
}

git_issue_sync () {
	local remote=$(git config --get issue.remote || echo 'origin')

	git fetch -q $remote
	if git branch --remote | grep -q "$remote/$ISSUE_BRANCH"
	then
		if git_local_branch_exists $ISSUE_BRANCH
		then
			git_issue_switch_branch
			git rebase -q $remote/$ISSUE_BRANCH
		else
			git checkout -q -b $ISSUE_BRANCH "$remote/$ISSUE_BRANCH" >/dev/null
		fi
	fi

	if git_local_branch_exists $ISSUE_BRANCH
	then
		git_issue_switch_branch
		git push -q -u $remote $ISSUE_BRANCH >/dev/null
	fi

	if git_local_branch_exists $ISSUE_BRANCH
	then
		say $(gettextln 'Issues synced.')
	else
		say $(gettextln 'Nothing to sync.')
	fi
}

git_issue_close () {
	status='close'
	COMMIT_MESSAGE='Close issue.'

	git_issue_edit "$@"
}
# }}}

trap 'git_issue_restore_branch' EXIT

git_issue_parse_args "$@"

function_exists "git_issue_${COMMAND}" || die $(eval_gettextln "git issue $COMMAND doesn't exist")

eval git_issue_${COMMAND} $REMAINING_ARG
